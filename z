./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/CustomEvents/01-demo.py:        button = wx.Button(panel, -1, "Start", pos=(100, 10))
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/CustomEvents/01-demo.py:        button.Bind(wx.EVT_BUTTON, self.onclick)
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/CustomEvents/02-demo.py:        button = wx.Button(panel, -1, "Start", pos=(100, 10))
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/CustomEvents/02-demo.py:        button.Bind(wx.EVT_BUTTON, self.onclick)
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/07-widgets.py:        buttonNo = event.Id - MyFrame.ID_BUTTON1 + 1
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/07-widgets.py:        message = "Button " + str(buttonNo) + " pressed"
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/06-static-text.py:        buttonNo = event.Id - MyFrame.ID_BUTTON1 + 1
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/06-static-text.py:        message = "Button " + str(buttonNo) + " pressed"
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/05-buttons.py:#    buttons
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/05-buttons.py:        buttonNo = event.Id - self.button1.GetId() + 1
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/05-buttons.py:        message = "Button " + str(buttonNo) + " pressed"
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/05-buttons.py:        self.button1 = wx.Button(self.panel, next(idGenerator), 'Button1')
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/05-buttons.py:        self.button2 = wx.Button(self.panel, next(idGenerator), 'Button2')
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/05-buttons.py:        self.button3 = wx.Button(self.panel, next(idGenerator), 'Button3')
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/05-buttons.py:        self.box.Add(self.button1, 1 )
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/05-buttons.py:        self.box.Add(self.button2, 1 )
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/05-buttons.py:        self.box.Add(self.button3, 1 )
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/05-buttons.py:        self.Bind(wx.EVT_BUTTON, self.onButton, self.button1)
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/05-buttons.py:        self.Bind(wx.EVT_BUTTON, self.onButton, self.button2)
./src/30 Miscellaneous Topics/GUI Frameworks/wxPython/05-buttons.py:        self.Bind(wx.EVT_BUTTON, self.onButton, self.button3)
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/08_Checkbuttons.py:#	Checkbuttons
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/08_Checkbuttons.py:# set up 3 checkbuttons and display their status in a
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/08_Checkbuttons.py:# button widget (its display name);
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/08_Checkbuttons.py:    button = Button(frame, text="Status")
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/08_Checkbuttons.py:    button.pack()
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/08_Checkbuttons.py:    callback.status = button;
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/08_Checkbuttons.py:    Checkbutton(frame, text = "Checkbutton 1", 
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/08_Checkbuttons.py:    Checkbutton(frame, text = "Checkbutton 2", 
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/08_Checkbuttons.py:    Checkbutton(frame, text = "Checkbutton 3", 
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/08_Checkbuttons.py:# all 3 checkbuttons use the same callback method
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/07_ButtonStyles.py:    b1 = Button(frame, text = "flat button")
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/07_ButtonStyles.py:    b2 = Button(frame, text = "groove button")
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/07_ButtonStyles.py:    b3 = Button(frame, text = "raised button")
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/07_ButtonStyles.py:    b4 = Button(frame, text = "ridge button")
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/07_ButtonStyles.py:    b5 = Button(frame, text = "sunken button")
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/07_ButtonStyles.py:    b6 = Button(frame, text = "solid button")
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/scrape_sudoku.py:    # click some buttons to get expert sudoku
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/15_MouseEvents.py:    if(event.num == 1): callback.label.configure(text = "Left button pressed")
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/15_MouseEvents.py:    if(event.num == 2): callback.label.configure(text = "Middle button pressed")
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/15_MouseEvents.py:    if(event.num == 3): callback.label.configure(text = "Right button pressed")
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/15_MouseEvents.py:    label = Label(frame, text = "Press a mouse button")
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/10_DisablingButtons.py:# demonstrate changing a button's colour when active and
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/10_DisablingButtons.py:# toggling the button between enabled and disabled
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/10_DisablingButtons.py:    # toggle the state of the exit button
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/10_DisablingButtons.py:    buttonExit = callback.buttonExit
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/10_DisablingButtons.py:    if(buttonExit.cget("state") == "disabled"):
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/10_DisablingButtons.py:        buttonExit.configure(state = "normal")
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/10_DisablingButtons.py:        buttonExit.configure(state = "disabled")
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/10_DisablingButtons.py:    buttonExit = Button(frame, 
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/10_DisablingButtons.py:    buttonToggle = Button(frame, 
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/10_DisablingButtons.py:    buttonToggle.pack()
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/10_DisablingButtons.py:    buttonExit.pack()
./src/30 Miscellaneous Topics/GUI Frameworks/Tk/10_DisablingButtons.py:    callback.buttonExit = buttonExit
./src/30 Miscellaneous Topics/GUI Frameworks/kivy/scrape_sudoku.py:    # click some buttons to get expert sudoku
./src/30 Miscellaneous Topics/GUI Frameworks/kivy/02_binding.py:from kivy.uix.button import Button 
./src/30 Miscellaneous Topics/GUI Frameworks/kivy/06_sudoku.py:from kivy.uix.button import Button
./src/30 Miscellaneous Topics/GUI Frameworks/kivy/06_sudoku.py:    def on_center(self, button, pos):
./src/30 Miscellaneous Topics/GUI Frameworks/kivy/03_grid_layout.py:from kivy.uix.button import Button
./src/30 Miscellaneous Topics/GUI Frameworks/kivy/07_stack_simulator.py:from kivy.uix.button import Button
./src/30 Miscellaneous Topics/GUI Frameworks/kivy/07_stack_simulator.py:    def on_center(self, button, pos):
./src/30 Miscellaneous Topics/GUI Frameworks/kivy/05_default_button_bindings.py:from kivy.uix.button import Button 
./src/30 Miscellaneous Topics/GUI Frameworks/kivy/05_default_button_bindings.py:        THe button class already defines several Kivy properties:
./src/30 Miscellaneous Topics/GUI Frameworks/kivy/05_default_button_bindings.py:        Most of the Button's Kivy properties will change when the button is first drawn, so the callbacks 
./src/30 Miscellaneous Topics/GUI Frameworks/kivy/05_default_button_bindings.py:    def on_pos(self, button, pos):
./src/30 Miscellaneous Topics/GUI Frameworks/kivy/05_default_button_bindings.py:        print(f"object name = {button.name}")
./src/30 Miscellaneous Topics/GUI Frameworks/kivy/05_default_button_bindings.py:    def on_size(self, button, size):
./src/30 Miscellaneous Topics/GUI Frameworks/kivy/05_default_button_bindings.py:        print(f"object name = {button.name}")
./src/30 Miscellaneous Topics/GUI Frameworks/PyQt/demo3.py:button = QPushButton('Hello World')
./src/30 Miscellaneous Topics/GUI Frameworks/PyQt/demo3.py:button.show()
./src/30 Miscellaneous Topics/GUI Frameworks/PyQt/demo4.py:button = QPushButton('Hello World')
./src/30 Miscellaneous Topics/GUI Frameworks/PyQt/demo4.py:button.show()
./src/30 Miscellaneous Topics/GUI Frameworks/PyQt/demo5.py:button = QPushButton('Click')
./src/30 Miscellaneous Topics/GUI Frameworks/PyQt/demo5.py:def on_button_clicked():
./src/30 Miscellaneous Topics/GUI Frameworks/PyQt/demo5.py:    alert.setText('You clicked the button!')
./src/30 Miscellaneous Topics/GUI Frameworks/PyQt/demo5.py:button.clicked.connect(on_button_clicked)
./src/30 Miscellaneous Topics/GUI Frameworks/PyQt/demo5.py:button.show()
./src/39 Networking/06 Web Scraping/04_scrape_bridge_results.py:selector = "#result_buttons > table > tbody > tr > td > table > tbody > tr > td:nth-child(4) > div"
./src/play/01.py:    """ Button-Event-Handler to see if a button on GUI works. """
./src/play/01.py:    buttonT = Button(master=root, text='Asyncio Tasks', command=do_tasks)
./src/play/01.py:    buttonT.pack()
./src/play/01.py:    buttonX = Button(master=root, text='Freezed???', command=do_freezed)
./src/play/01.py:    buttonX.pack()
./src/26 DynamicAnalysis/Selenium/02_scrape_bridge_results.py:selector = "#result_buttons > table > tbody > tr > td > table > tbody > tr > td:nth-child(4) > div"
./src/35 Play/2.py:    """ Button-Event-Handler to see if a button on GUI works. """
./src/35 Play/2.py:    buttonT = Button(master=root, text='Asyncio Tasks', command=do_tasks)
./src/35 Play/2.py:    buttonT.pack()
./src/35 Play/2.py:    buttonX = Button(master=root, text='Freezed???', command=do_freezed)
./src/35 Play/2.py:    buttonX.pack()
./src/35 Play/demo3.py:                reply5 = easygui.buttonbox(msg5, choices=choices5)
./src/36 EPICS/catools/05-controling-sine-wave.py:def on_button_clicked():
./src/36 EPICS/catools/05-controling-sine-wave.py:    update("chris:freqCalc", on_button_clicked.callbacks['frequency'])
./src/36 EPICS/catools/05-controling-sine-wave.py:    update("chris:offset", on_button_clicked.callbacks['offset'])
./src/36 EPICS/catools/05-controling-sine-wave.py:    update("chris:amplitude", on_button_clicked.callbacks['amplitude'])
./src/36 EPICS/catools/05-controling-sine-wave.py:            button = QPushButton('update')
./src/36 EPICS/catools/05-controling-sine-wave.py:            button.clicked.connect(on_button_clicked)
./src/36 EPICS/catools/05-controling-sine-wave.py:            on_button_clicked.callbacks = callbacks
./src/36 EPICS/catools/05-controling-sine-wave.py:            subLayout.addWidget(button)
./src/36 EPICS/catools/06-monitorPVs.py:def on_button_clicked():
./src/36 EPICS/catools/06-monitorPVs.py:    update("chris:freqCalc", on_button_clicked.callbacks['frequency'])
./src/36 EPICS/catools/06-monitorPVs.py:    update("chris:offset", on_button_clicked.callbacks['offset'])
./src/36 EPICS/catools/06-monitorPVs.py:    update("chris:amplitude", on_button_clicked.callbacks['amplitude'])
./src/36 EPICS/catools/06-monitorPVs.py:            button = QPushButton('update')
./src/36 EPICS/catools/06-monitorPVs.py:            button.clicked.connect(on_button_clicked)
./src/36 EPICS/catools/06-monitorPVs.py:            on_button_clicked.callbacks = callbacks
./src/36 EPICS/catools/06-monitorPVs.py:            subLayout.addWidget(button)
